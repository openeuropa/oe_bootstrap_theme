<?php

/**
 * @file
 * OE Bootstrap Theme Paragraphs module.
 */

declare(strict_types = 1);

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\media\MediaInterface;
use Drupal\media\MediaSourceInterface;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\media\Plugin\media\Source\OEmbed;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalPhotoSource;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalSourceInterface;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalVideoSource;
use Drupal\oe_bootstrap_theme\ValueObject\ImageValueObject;
use Drupal\oe_media_iframe\Plugin\media\Source\Iframe;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds a bare, markup-free template suggestion to all paragraph fields.
 */
function oe_bootstrap_theme_paragraphs_theme_suggestions_field_alter(array &$suggestions, array $variables): void {
  $element = $variables['element'];

  // Do not output field labels and wrapping markup for paragraph fields.
  if (isset($element['#entity_type']) && $element['#entity_type'] === 'paragraph') {
    // Prepend the new suggestion to the list. This will put it right after the
    // default field template. By doing this we allow to override single
    // fields, while keeping all the rest markup-free.
    array_unshift($suggestions, 'field__bare');
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function oe_bootstrap_theme_paragraphs_preprocess_paragraph__oe_links_block(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['orientation'] = $paragraph->get('oe_bt_links_block_orientation')->value;
  $variables['background'] = $paragraph->get('oe_bt_links_block_background')->value;
  $variables['title'] = $paragraph->get('field_oe_text')->value ?? '';

  foreach (Element::children($variables['content']['field_oe_links']) as $index) {
    $variables['links'][] = [
      'label' => $variables['content']['field_oe_links'][$index]['#title'],
      'path' => $variables['content']['field_oe_links'][$index]['#url']->toString(),
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph() for oe_social_media_follow paragraph.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_social_media_follow(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['orientation'] = $paragraph->get('field_oe_social_media_variant')->value;
  $variables['background'] = $paragraph->get('oe_bt_links_block_background')->value;
  $variables['title'] = $paragraph->get('field_oe_title')->value ?? '';
  $links = $paragraph->get('field_oe_social_media_links')->getValue();
  $variables['links'] = [];
  foreach ($links as $key => $link) {
    $variables['links'][$key]['icon_position'] = 'before';
    $variables['links'][$key]['icon']['path'] = $variables['bcl_icon_path'];
    $variables['links'][$key]['icon']['name'] = $link['link_type'];
    $variables['links'][$key]['label'] = $link['title'];
    $variables['links'][$key]['path'] = Url::fromUri($link['uri'])->toString();
  }
  if (!$paragraph->get('field_oe_social_media_see_more')->isEmpty()) {
    $other_link = $paragraph->get('field_oe_social_media_see_more')
      ->first()
      ->getValue();
    $variables['links'][] = [
      'label' => $other_link['title'],
      'path' => Url::fromUri($other_link['uri'])->toString(),
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__oe_accordion().
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_accordion(array &$variables): void {
  // Massage data to be compliant with OE Bootstrap Theme accordion component
  // data structure.
  $builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
  $variables['items'] = [];

  /** @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $field_item */
  foreach ($variables['paragraph']->get('field_oe_paragraphs') as $field_item) {
    $paragraph = \Drupal::service('entity.repository')->getTranslationFromContext($field_item->entity);
    $variables['items'][] = [
      'title' => $builder->viewField($paragraph->get('field_oe_text')),
      'content' => $builder->viewField($paragraph->get('field_oe_text_long')),
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-text-feature-media.html.twig.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_text_feature_media(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Bail out if there is no media present.
  if ($paragraph->get('field_oe_media')->isEmpty()) {
    return;
  }

  /** @var \Drupal\media\Entity\Media $media */
  $media = $paragraph->get('field_oe_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct media translation.
  /** @var \Drupal\media\Entity\Media $media */
  $media = \Drupal::service('entity.repository')->getTranslationFromContext($media, $paragraph->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability = CacheableMetadata::createFromRenderArray($variables);
  $cacheability->addCacheableDependency($media);

  // Run access checks on the media entity.
  $access = $media->access('view', $variables['user'], TRUE);
  $cacheability->addCacheableDependency($access);
  if (!$access->isAllowed()) {
    $cacheability->applyTo($variables);
    return;
  }

  // Get the media source.
  $source = $media->getSource();

  $is_image = $source instanceof MediaAvPortalPhotoSource || $source instanceof Image;
  $is_video = $source instanceof MediaAvPortalVideoSource || $source instanceof OEmbed || $source instanceof Iframe;

  // If it's not an image and not a video, bail out.
  if (!$is_image && !$is_video) {
    $cacheability->applyTo($variables);
    return;
  }

  $variant = $paragraph->get('oe_paragraphs_variant')->value ?? 'default';
  $variables['text_position'] = str_replace([
    '_featured',
    '_simple',
  ], '', $variant);

  if ($is_image) {
    $thumbnail = $media->get('thumbnail')->first();
    $variables['image'] = ImageValueObject::fromStyledImageItem($thumbnail, 'oe_bootstrap_theme_medium_no_crop');
  }
  elseif ($is_video) {
    _oe_bootstrap_theme_featured_media_set_embedded_media($variables, $media, $cacheability, $source);
  }

  $cacheability->applyTo($variables);

  if (empty($paragraph->get('field_oe_link')->first())) {
    return;
  }

  /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link_item */
  $link_item = $paragraph->get('field_oe_link')->first();
  $variables['link'] = [
    'path' => $link_item->getUrl()->toString(),
    'label' => $link_item->get('title')->getValue(),
  ];
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-list-item-block.html.twig.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_list_item_block(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['title'] = $paragraph->get('field_oe_title')->first()->value;
  $variables['columns'] = oe_bootstrap_theme_get_bcl_layout_mapping($paragraph->get('field_oe_list_item_block_layout')->first()->value);
  $variables['items'] = [];

  foreach ($variables['paragraph']->get('field_oe_paragraphs') as $delta => $item) {
    $image = [];
    if (!$item->entity->get('field_oe_image')->isEmpty()) {
      /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $image_item */
      $image_item = $item->entity->get('field_oe_image')->first();
      $file = $image_item->get('entity')->getValue();
      $image = [
        'path' => file_url_transform_relative(file_create_url($file->getFileUri())),
        'alt' => $image_item->get('alt')->getValue(),
        'position' => 'top',
      ];
      if ($item->entity->get('oe_paragraphs_variant')->first()->value === 'thumbnail_secondary') {
        $image['position'] = 'bottom';
      }
    }

    // Prepare the date fields if date is available.
    $contentItem = '';
    if (!$item->entity->get('field_oe_date')->isEmpty()) {
      $display_options = EntityViewDisplay::load('paragraph.oe_list_item.default')
        ->getComponent('field_oe_date');
      $dateItem = $item->entity->get('field_oe_date')->first();
      $contentItem = [
        '#type' => 'inline_template',
        '#template' => '<div><span class="d-md-inline d-block text-muted mb-2 mb-md-0">{{ date }}</span></div>',
        '#context' => [
          'date' => $dateItem->view($display_options),
        ],
      ];
    }

    // Prepare the metas if available.
    $metas = [];
    if (!$item->entity->get('field_oe_meta')->isEmpty()) {
      foreach ($item->entity->get('field_oe_meta') as $item_meta) {
        $metas[] = [
          'label' => $item_meta->value,
          'background' => 'primary',
        ];
      }
    }

    $variables['items'][] = [
      'title' => [
        'content' => Link::fromTextAndUrl(
          $item->entity->field_oe_title->value,
          $item->entity->get('field_oe_link')->first()->getUrl()
        ),
      ],
      'text' => [
        'content' => $item->entity->field_oe_text_long->value,
        'classes' => 'mb-2',
      ],
      'image' => $image,
      'badges' => $metas,
      'content' => $contentItem,
    ];
  }

  // Prepare the button variables if a link has been specified.
  if ($paragraph->get('field_oe_link')->isEmpty()) {
    return;
  }

  /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $link_item */
  $link_item = $paragraph->get('field_oe_link')->first();
  $variables['link'] = [
    'path' => $link_item->getUrl()->toString(),
    'label' => $link_item->get('title')->getValue(),
    'icon' => [
      'path' => $variables['bcl_icon_path'],
      'name' => 'chevron-right',
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph() for oe_banner paragraph.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_banner(array &$variables): void {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['title'] = $paragraph->get('field_oe_title')->value;
  $variables['description'] = $paragraph->get('field_oe_text')->value;
  $variables['full_width'] = (bool) $paragraph->get('field_oe_banner_full_width')->value;
  oe_bootstrap_theme_set_banner_link($paragraph, $variables);

  // The alignment field value contains the information regarding the pattern
  // type and centering.
  $alignment = $paragraph->get('field_oe_banner_type')->value;
  [$banner_type, $banner_alignment] = explode('_', $alignment);
  // The beginning of the string determines the pattern.
  $variables['pattern'] = 'banner_' . $banner_type;
  // The end of the string determines the position.
  $variables['alignment'] = $banner_alignment;

  $variant = $paragraph->get('oe_paragraphs_variant')->value ?? 'default';
  $variables['variant'] = str_replace('oe_banner_', '', $variant);

  if ($variables['variant'] === 'default' || $variables['variant'] === 'primary') {
    return;
  }

  // Bail out if there is no media present.
  if ($paragraph->get('field_oe_media')->isEmpty()) {
    return;
  }
  $cacheability = CacheableMetadata::createFromRenderArray($variables);

  /** @var \Drupal\media\Entity\Media $media */
  $media = $paragraph->get('field_oe_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct translation to display.
  $media = \Drupal::service('entity.repository')->getTranslationFromContext($media, $paragraph->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability->addCacheableDependency($media);

  // Run access checks on the media entity.
  $access = $media->access('view', $variables['user'], TRUE);
  $cacheability->addCacheableDependency($access);
  if (!$access->isAllowed()) {
    $cacheability->applyTo($variables);
    return;
  }

  $source = $media->getSource();
  // We only support images and AV Portal photos for now.
  if (!$source instanceof MediaAvPortalSourceInterface && !$source instanceof Image) {
    $cacheability->applyTo($variables);
    return;
  }

  $uri = oe_bootstrap_theme_get_media_uri($source, $media, $cacheability);

  // The uri might be empty if the source is of type Image and the file entity
  // was deleted.
  if (empty($uri)) {
    $cacheability->applyTo($variables);
    return;
  }

  $variables['image'] = ImageValueObject::fromArray([
    'src' => file_create_url($uri),
    'alt' => $source->getMetadata($media, 'thumbnail_alt_value') ?? $media->label(),
    'name' => $media->getName(),
  ]);
  $cacheability->applyTo($variables);
}

/**
 * Implements hook_preprocess_paragraph() for timeline paragraph.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_timeline(array &$variables): void {
  $paragraph = $variables['paragraph'];
  $variables['heading'] = $paragraph->get('field_oe_title')->value ?? '';
  if (!isset($variables['content']['field_oe_timeline']['#items'])) {
    return;
  }
  // Adapting body to content as defined in pattern.
  foreach ($variables['content']['field_oe_timeline']['#items'] as &$timeline_item) {
    $timeline_item['content'] = $timeline_item['body'];
    unset($timeline_item['body']);
    $variables['content']['items'][] = $timeline_item;
  }
  $variables['hide_from'] = $paragraph->get('field_oe_timeline_expand')->value;
}

/**
 * Implements hook_preprocess_paragraph() for paragraph--oe-content-row--variant-inpage-navigation.html.twig.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_content_row__variant_inpage_navigation(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if ($paragraph->get('field_oe_paragraphs')->isEmpty()) {
    return;
  }

  $variables['attributes']['id'] = Html::getUniqueId('bcl-inpage-navigation-pid-' . $paragraph->id());

  $variables['title'] = t('Page contents');
  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }

  $field_render = &$variables['content']['field_oe_paragraphs'];
  $links = [];
  foreach ($paragraph->get('field_oe_paragraphs')->referencedEntities() as $delta => $sub_paragraph) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $sub_paragraph */
    if (!$sub_paragraph->hasField('field_oe_title') || $sub_paragraph->get('field_oe_title')->isEmpty()) {
      continue;
    }

    $unique_id = Html::getUniqueId('bcl-inpage-item-' . $sub_paragraph->id());
    $field_render[$delta]['#theme_wrappers']['container'] = [
      '#attributes' => ['id' => $unique_id],
    ];

    $sub_paragraph = \Drupal::service('entity.repository')
      ->getTranslationFromContext($sub_paragraph, $paragraph->language()->getId());

    $links[] = [
      'path' => '#' . $unique_id,
      'label' => $sub_paragraph->get('field_oe_title')->first()->value,
    ];
  }

  $variables['links'] = $links;
}

/**
 * Implements hook_preprocess_paragraph() for oe_description-list paragraph.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_description_list(array &$variables): void {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $variables['title'] = $paragraph->get('field_oe_title')->value ?? '';
  $variables['orientation'] = $paragraph->get('oe_bt_orientation')->value;

  foreach ($paragraph->get('field_oe_description_list_items') as $item) {
    $variables['items'][] = [
      'term' => $item->term,
      'definition' => $item->description,
    ];
  }
}

/**
 * Gets the mapped layout.
 *
 * @param string $layout
 *   The paragraph layout.
 *
 * @return string
 *   The BCL layout.
 */
function oe_bootstrap_theme_get_bcl_layout_mapping(string $layout): string {
  if ($layout === 'three_columns') {
    return 'highlight-3-col';
  }
  if ($layout === 'two_columns') {
    return 'highlight-2-col';
  }

  return 'highlight-1-col';
}

/**
 * Sets link variable for banner paragraph.
 *
 * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
 *   The paragraph.
 * @param array $variables
 *   The render array.
 */
function oe_bootstrap_theme_set_banner_link(Paragraph $paragraph, array &$variables): void {
  if ($paragraph->get('field_oe_link')->isEmpty()) {
    return;
  }

  $link = $paragraph->get('field_oe_link')->first();
  $variables['url'] = $link->getUrl()->toString();
  $variables['label'] = $link->get('title')->getValue();
}

/**
 * Gets the uri from a media object.
 *
 * @param \Drupal\media\MediaSourceInterface $source
 *   The media source.
 * @param \Drupal\media\Entity\Media $media
 *   The media object.
 * @param \Drupal\Core\Cache\CacheableMetadata $cacheability
 *   The cacheability object.
 *
 * @return string
 *   The uri string.
 */
function oe_bootstrap_theme_get_media_uri(MediaSourceInterface $source, Media $media, CacheableMetadata $cacheability): string {
  $field_name = $source->getConfiguration()['source_field'];

  if ($source instanceof Image && ($file_entity = $media->get($field_name)->entity)) {
    $cacheability->addCacheableDependency($file_entity);
    return $file_entity->getFileUri();
  }

  if ($source instanceof MediaAvPortalSourceInterface) {
    $resource_ref = $media->get($field_name)->value;
    return 'avportal://' . $resource_ref . '.jpg';
  }

  return '';
}

/**
 * Prepares embedded media variables for "text with featured media" paragraph.
 *
 * @param array $variables
 *   The render array.
 * @param \Drupal\media\MediaInterface $media
 *   Media object.
 * @param \Drupal\Core\Cache\CacheableMetadata $cacheability
 *   CacheableMetadata object.
 * @param \Drupal\media\MediaSourceInterface $source
 *   Media source.
 */
function _oe_bootstrap_theme_featured_media_set_embedded_media(array &$variables, MediaInterface $media, CacheableMetadata $cacheability, MediaSourceInterface $source): void {
  // Default video aspect ratio is set to 16x9.
  $variables['ratio'] = '16x9';

  // Load information about the media and the display.
  $media_type = \Drupal::entityTypeManager()->getStorage('media_type')->load($media->bundle());
  $cacheability->addCacheableDependency($media_type);
  $source_field = $source->getSourceFieldDefinition($media_type);
  $display = EntityViewDisplay::collectRenderDisplay($media, 'default');
  $cacheability->addCacheableDependency($display);
  $display_options = $display->getComponent($source_field->getName());

  $variables['embedded_media'] = $media->{$source_field->getName()}->view($display_options);

  if ($media->bundle() === 'video_iframe') {
    $ratio = $media->get('oe_media_iframe_ratio')->value;
    $variables['ratio'] = str_replace('_', 'x', $ratio);
  }
}
